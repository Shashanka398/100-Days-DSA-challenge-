Buy and Sell a Share at most twice

Link:https://practice.geeksforgeeks.org/problems/buy-and-sell-a-share-at-most-twice/1?utm_source=gfg&utm_medium=article&utm_campaign=bottom_sticky_on_article


In daily share trading, a buyer buys shares in the morning and sells them on the same day. If the trader is allowed to make at most 2 transactions in a day, the second transaction can only start after the first one is complete (Buy->sell->Buy->sell). The stock prices throughout the day are represented in the form of an array of prices. 

Given an array price of size N, find out the maximum profit that a share trader could have made.

Example 1:

Input:
6
10 22 5 75 65 80
Output:
87
Explanation:
Trader earns 87 as sum of 12, 75 
Buy at 10, sell at 22, 
Buy at 5 and sell at 80

Solution:

class Solution:
    def maxProfit(self, size : int, arr : List[int]) -> int:
        
        # code here
        first_buy = -100000;
        first_sell = 0;
        second_buy = -100000;
        second_sell = 0;
 
        for i in range(size):
            first_buy = max(first_buy, -arr[i]);
            first_sell = max(first_sell, first_buy + arr[i]);
            second_buy = max(second_buy, first_sell - arr[i]);
            second_sell = max(second_sell, second_buy + arr[i]);
 
     
        return second_sell;
